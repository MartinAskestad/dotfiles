unlet! g:skip_defaults_vim
source $VIMRUNTIME\defaults.vim

if has('vim_starting')
  " encoding, changing encoding at runtime is undefined behavior
  if &encoding !=? 'utf-8' | let &termencoding=&encoding | endif
  set encoding=utf-8 fileencoding=utf-8 fileformats=dos,unix
  set fileencodings=utf-8,iso-8859-1

  set langmenu=en_US
  let $LANG = 'en_US'
  source $VIMRUNTIME\delmenu.vim
  source $VIMRUNTIME\menu.vim
endif

" ### BEHAVIOR ### {{{
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_keepdir = 0
let g:netrw_browse_split = 4
set matchpairs+=<:>
set nowrapscan ignorecase smartcase hlsearch magic
set noautochdir noautowrite noautowriteall autoread
set winminwidth=8 winheight=8 winminheight=8 noequalalways nowinfixwidth nowinfixheight
set mouse=
set wildmenu wildchar=9 wildmode=full,longest:list wildoptions=pum wildignorecase
set wildignore=*/node_modules/*,*/.git/*,*/dist/*,*/target/*
set directory-=. undodir=$HOME\vimfiles\undo undolevels=1000 backupdir=$HOME\vimfiles\backup
set undofile backup
set viewdir=$HOME\vimfiles\view history=1000 sessionoptions-=options viewoptions+=options
set laststatus=2 display+=lastline
set list listchars=tab:→\ ,eol:¬,nbsp:␣,trail:•,extends:⟩,precedes:⟨ showbreak=↩\
set formatoptions+=j
if !empty($viminfo)
  set viminfo^=!
endif
set t_Co=256 termguicolors

augroup vimrc
  au!
  au! DirChanged * let g:netrw_list_hide = netrw_gitignore#Hide() .. ',\(^\|\s\s\)\zs\.\S\+'
  au! BufLeave,FocusLost,InsertEnter,WinLeave * if &nu | setlocal nornu | endif
  au! BufEnter,FocusGained,InsertLeave,WinEnter * if &nu | setlocal rnu | endif
  au! BufWinLeave *.* mkview
  au! BufWinEnter *.* silent loadview
  au! VimResized * tabdo wincmd =
  au! FocusGained * silent! checktime
augroup END

augroup FileMarks
  au!
  au BufLeave *.html normal! mH
  au BufLeave *.rs   normal! mR
  au BufLeave *.ts   normal! mT
  au BufLeave *.js   normal! mJ
  au BufLeave *.css  normal! mC
  au BufLeave *.scss  normal! mC
augroup END

if executable('rg')
  set grepprg=rg\ --vimgrep
  set grepformat=%f:%l:%c:%m
endif

colorscheme sonoma
" Note: This should be set after `set termguicolors` or `set t_Co=256`.
if &term =~ 'xterm' || &term == 'win32'
  " Use DECSCUSR escape sequences
  let &t_SI = "\e[5 q"    " blink bar
  let &t_SR = "\e[3 q"    " blink underline
  let &t_EI = "\e[1 q"    " blink block
  let &t_ti ..= "\e[1 q"   " blink block
  let &t_te ..= "\e[0 q"   " default (depends on terminal, normally blink block)
endif

hi SpelunkerSpellBad cterm=underline gui=underline,italic
hi SpelunkerComplexOrCompundWord cterm=underline gui=underline guifg=NONE
" }}}
" ### KEYBOARD SHORTCUTS ### {{{
let g:mapleader = "\<Space>"
nnoremap , ;
nnoremap ; ,
vnoremap , ;
vnoremap ; ,
vnoremap p pgvy
vnoremap <Leader>p "*pgvy
vnoremap <Leader>y "*y
nnoremap gV `[v`]
nnoremap x "_x
tnoremap <Esc> <C-w>N
nnoremap <silent><C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
" Views/Windows
nnoremap <Leader>vs <C-w>s    " Split window
nnoremap <Leader>vv <C-w>v    " Vertical split window
" Switch active window
nnoremap <Left> <C-w>h
nnoremap <Down> <C-w>j
nnoremap <Up> <C-w>k
nnoremap <Right> <C-w>l
" Resize window
nnoremap <C-Left> <C-w>5<
nnoremap <PageDown> <C-w>:resize +5<CR>
nnoremap <PageUp> <C-w>:resize -5<CR>
nnoremap <C-Right> <C-w>5>
nnoremap <Leader>vr <C-w>r   " Rotate window positions
nnoremap <Leader>vm <C-w>\|<C-w>_
nnoremap <Leader>vB <C-w>_
nnoremap <Leader>vV <C-w>\|
nnoremap <Leader>vb <C-w>=
nnoremap <Leader>vx <C-c>:call vimrc#swap_win_buf()<CR>  " Exchange window positions

inoremap <C-BS> <C-w>
cnoremap <C-BS> <C-w>
nmap å ]
nmap Å [
omap å ]
omap Å [
xmap å ]
xmap Å [
nnoremap <C-j> mz:m+<CR>`z==
nnoremap <C-k> mz:m-2<CR>`z==
inoremap <C-j> <Esc>:m+<CR>==gi
inoremap <C-k> <Esc>:m-2<CR>==gi
vnoremap <C-j> :m'>+<CR>gv=`<my`>mzgv`yo`z
vnoremap <C-k> :m'<-2<CR>gv=`>my`<mzgv`yo`z
nnoremap <Leader>o :PickBuffer<CR>
nnoremap <Leader>ov :horizontal PickBuffer<CR>
nnoremap <Leader>os :vertical PickBuffer<CR>
nnoremap <Leader>p :PickFile<CR>
nnoremap <Leader>pv :vertical PickFile<CR>
nnoremap <Leader>ps :horizontal PickFile<CR>
nnoremap <Leader>s  :SwitchFile<CR>
nnoremap <Leader>sv :vertical SwitchFile<CR>
nnoremap <Leader>ss :horizontal SwitchFile<CR>
inoremap ( ()<Left>
inoremap { {}<Left>
inoremap [ []<Left>
inoremap <expr> ) strpart(getline('.'), col('.') - 1, 1) == ")" ? "\<Right>" : ")"
inoremap <expr> } strpart(getline('.'), col('.') - 1, 1) == "}" ? "\<Right>" : "}"
inoremap <expr> ] strpart(getline('.'), col('.') - 1, 1) == "]" ? "\<Right>" : "]"
inoremap <expr> ' strpart(getline('.'), col('.') - 1, 1) == "'" ? "\<Right>" : "''<Left>"
inoremap <expr> " strpart(getline('.'), col('.') - 1, 1) == "\"" ? "\<Right>" : "\"\"<Left>"
let g:empty_pairs = ["()", "[]", "{}", "''", "``", '""']
inoremap <expr> <BS> index(g:empty_pairs, strpart(getline('.'), col('.') - 2, 2)) > -1 ? "\<Right><BS><BS>" : "\<BS>"
nnoremap <silent><Leader>bd :bprevious <bar> bdelete #<CR>
nnoremap <leader>W :set wrap!<CR>
" }}}
" ### PLUGINS ### {{{
" Don't load plugins we don't want
let g:loaded_2html_plugin = 1
let g:loaded_gzip = 1
let g:loaded_manpager_plugin = 1
let g:loaded_rrhelper = 1
let g:loaded_tar = 1
let g:loaded_tarPlugin = 1
let g:loaded_vimballPlugin =1
let g:loaded_zipPlugin = 1
let g_loaded_zip = 1

" Load the plugins we actually want
packadd cfilter
packadd editexisting

function! PackAdd() abort
  packadd minpac
  call minpac#init()
  call minpac#add('k-takata/minpac', { 'type': 'opt' })
  call minpac#add('MartinAskestad/popupmenufilter')
  call minpac#add('MartinAskestad/pickbuffer')
  call minpac#add('MartinAskestad/pickfile')
  call minpac#add('MartinAskestad/picknpmscript')
  call minpac#add('MartinAskestad/angular-file-switch', { 'type': 'opt' })
  call minpac#add('chrisbra/matchit')
  call minpac#add('kamykn/spelunker.vim')
  call minpac#add('kana/vim-textobj-entire')
  call minpac#add('kana/vim-textobj-user')
  call minpac#add('machakann/vim-sandwich')
  call minpac#add('sheerun/vim-polyglot')
  call minpac#add('hrsh7th/vim-vsnip')
  call minpac#add('adriaanzon/vim-textobj-matchit', { 'type': 'opt' })
  call minpac#add('beloglazov/vim-textobj-quotes', { 'type': 'opt' })
  call minpac#add('bkad/CamelCaseMotion', { 'type': 'opt' })
  call minpac#add('jasonlong/vim-textobj-css', { 'type': 'opt' })
  call minpac#add('kana/vim-textobj-function', { 'type': 'opt' })
  call minpac#add('kana/vim-textobj-indent', { 'type': 'opt' })
  call minpac#add('mattn/emmet-vim', { 'type': 'opt' })
  call minpac#add('prettier/vim-prettier', { 'type': 'opt' })
  call minpac#add('sgur/vim-textobj-parameter', { 'type': 'opt' })
  call minpac#add('thinca/vim-textobj-function-javascript', { 'type': 'opt' })
  call minpac#add('tpope/vim-commentary', { 'type': 'opt' })
  call minpac#add('endel/vim-github-colorscheme', { 'type': 'opt' })
  call minpac#add('kamykn/dark-theme.vim', { 'type': 'opt' })
  call minpac#add('protesilaos/tempus-themes-vim', { 'type': 'opt' })
  call minpac#add('vim-scripts/sonoma.vim', { 'type': 'opt' })

  call minpac#add('prabirshrestha/vim-lsp')
  call minpac#add('mattn/vim-lsp-settings')
endfunction

command! PackAdd call PackAdd() | call minpac#update()
command! PackRemove call PackAdd() | call minpac#clean()
command! PackStatus packadd minpac | call minpack#status()

set spelllang=en_us,sv,cjk nospell

augroup spelunker
  au!
  au! BufWinEnter,BufWritePost *.ts,*.html,*.rs,*.json,*.md,*.css,*.scss,*.cs,*.vim call spelunker#check()
  au! CursorHold *.ts,*.html,*.rs,*.json,*.md,*.css,*.scss,*.cs,*.vim call spelunker#check_displayed_words()
augroup END

function! s:on_lsp_buffer_enabled() abort
  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
  set omnifunc=lsp#complete
  set keywordprg=:LspHover
  nnoremap <buffer><Leader>, <plug>(lsp-hover)
  nnoremap <buffer><Leader>. <plug>(lsp-code-action)
  nnoremap <buffer>]d <plug>(lsp-next-diagnostic)
  nnoremap <buffer>[d <plug>(lsp-previous-diagnostic)
  nnoremap <buffer><Leader>lj <plug>(lsp-next-diagnostic)
  nnoremap <buffer><Leader>lk <plug>(lsp-previous-diagnostic)
  nnoremap <buffer><Leader>lr <plug>(lsp-rename)
  nnoremap <buffer><Leader>lR <plug>(lsp-references)
  nnoremap <buffer><Leader>ld <plug>(lsp-peek-definition)
  nnoremap <buffer><Leader>lD <plug>(lsp-definition)
  " nnoremap <buffer><Leader>lh :LspHighlight<CR>
  nnoremap <buffer><Leader>ls <plug>(lsp-document-symbol-search)
  nnoremap <buffer><Leader>lS <plug>(lsp-workspace-symbol-search)
  " nnoremap <buffer><Leader>lO :LspOutline<CR>
  nnoremap <buffer>gi <plug>(lsp-implementation)
  nnoremap <buffer>gd <plug>(lsp-definition)
  nnoremap <buffer>gD <plug>(lsp-declaration)
  " xnoremap <silent> <M-e> <Cmd>LspSelectionExpand<CR>
  " xnoremap <silent> <M-c> <Cmd>LspSelectionShrink<CR>
  " inoremap <buffer><C-i> <C-o>:LspShowSignature<CR>
  " nnoremap <buffer><Leader>D :LspDiagShow<CR>
  let b:lsp_active = v:true
endfunction

augroup lsp_install
  au!
  au User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

let g:vsnip_snippet_dir = expand('$HOME\.local\vim-vsnip')
imap <expr> <C-h>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
smap <expr> <C-h>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
" Expand or jump
imap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
smap <expr> <C-l>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-l>'
" Jump forward or backward
imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
" Select or cut text to use as $TM_SELECTED_TEXT in the next snippet.
" See https://github.com/hrsh7th/vim-vsnip/pull/50
nmap        <C-s>   <Plug>(vsnip-select-text)
xmap        <C-s>   <Plug>(vsnip-select-text)
nmap        <C-S>   <Plug>(vsnip-cut-text)
xmap        <C-S>   <Plug>(vsnip-cut-text)
" }}}
" ### STATUS LINE ### {{{
highlight User1 gui=reverse cterm=reverse
highlight User5 gui=bold,reverse cterm=bold,reverse

function! Stl_Filename() abort
  let l:filename = (&modified ? '%5*' : '%1*') . ' %t '
  let l:filename = l:filename . (exists('b:nerd_icon') ? b:nerd_icon . ' ' : '%y')
  return l:filename . '%#StatusLine#'
endfunction

autocmd ModeChanged *:n highlight StatusLine gui=bold guifg=bg guibg=#943A20
autocmd ModeChanged *:[vV\x16]* highlight StatusLine gui=bold guibg=#429D41 guifg=#FAEBD7
autocmd ModeChanged *:i highlight StatusLine guifg=#191970 guibg=#A9A9A9
autocmd ModeChanged *:R highlight StatusLine guifg=#191970 guibg=#A9A9A9

set statusline=\ 
set statusline+=%{%Stl_Filename()%}\ 
set statusline+=%{%git#name()%}
set statusline+=%=%{(&fenc!=''?toupper(&fenc):&enc)}\[%{&ff}]\ %3l%2c\
" }}}

