unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

if has('vim_starting')
  " Encoding, changing encoding at runtime is undefined behavior
  if &encoding !=? 'utf-8' | let &termencoding=&encoding | endif
  set encoding=utf-8 fileencoding=utf-8 fileformats=dos,unix
  set fileencodings=utf-8,iso-8859-1
endif

" ## Keyboard bindings ## {{{
let mapleader = " "
" Swtich : and . as well as , and ; for easier use on Swedish keyboard
nnoremap . :
nnoremap : .
nnoremap , ;
nnoremap ; ,
vnoremap . :
vnoremap : .
vnoremap ; ,
vnoremap , ;

vnoremap p pgvy " paste without overriding current register
nnoremap x "_x
nnoremap <Leader>N :nohlsearch<CR>
tnoremap <ESC> <C-w>N
nnoremap <F5> :so $MYVIMRC<CR>

" Views/Windows
nnoremap <Leader>vw <C-w>w    " Switch window
nnoremap <Leader>vq <C-w>c    " Close window
nnoremap <Leader>vs <C-w>s    " Split window
nnoremap <Leader>vv <C-w>v    " Vertical split window
nnoremap <Leader>vh <C-w>h    " Switch window left
nnoremap <Leader>vj <C-w>j    " Switch window down
nnoremap <Leader>vk <C-w>k    " Switch window up
nnoremap <Leader>vl <C-w>l    " Switch window right
nnoremap <Leader>vH <C-w>5<   " Change window size
nnoremap <Leader>vJ <C-w>:resize +5<CR>   " Change window size
nnoremap <Leader>vK <C-w>:resize -5<CR>   " Change window size
nnoremap <Leader>vL <C-w>5>   " Change window size
nnoremap <Leader>vb <C-w>=    " Balance windows
nnoremap <Leader>vV <C-w>\|   " Make window width max
nnoremap <Leader>vB <C-w>_    " Make window height max
nnoremap <Leader>vm <C-w>\|<C-w>_ " Maximize windows both directions

" Move lines
vnoremap <Leader>mj :m '>+1<CR>gv=gv  " Move marked lines down
vnoremap <Leader>mk :m '<-2<CR>gv=gv  " Move marked lines up
vnoremap <A-j> :m '>+1<CR>gv=gv       " Move marked lines down
vnoremap <A-k> :m '<-2<CR>gv=gv       " Move marked lines up

" Misc insert mode bindings
imap jj <ESC>
inoremap <C-BS> <C-w>

" Command mode bindings
cnoremap <C-BS> <C-w>
" font size
nnoremap <Leader>xp :let &guifont = substitute(
      \ &guifont,
      \ ':h\zs\d\+',
      \ '\=eval(submatch(0)+1)',
      \ 'g')<CR>
nnoremap <Leader>xm :let &guifont = substitute(
      \ &guifont,
      \ ':h\zs\d\+',
      \ '\=eval(submatch(0)-1)',
      \ 'g')<CR>
nnoremap <Leader>cd :cd %:p:h<CR>
nnoremap <leader>bo :CurrentBufferOnly<CR>

inoremap <expr> <CR> pumvisible() ? asyncomplete#close_popup() : "\<CR>"
inoremap <expr> <TAB> pumvisible() ? asyncomplete#close_popup() : "\<TAB>"
autocmd! CompleteDone ff if pumvisible() == 0 | pclose | endif

nnoremap <Leader>l. :LspCodeAction<CR>
nnoremap <Leader>l, :LspHover<CR>
nnoremap <Leader>lr :LspRename<CR>
nnoremap <Leader>ld :LspDefinition<CR>
nnoremap <Leader>lo :LspDocumentSymbol<CR>
nnoremap <Leader>ls :LspDocumentSymbolSearch<CR>
nnoremap <Leader>lS :LspWorkspaceSymbolSearch<CR>
nnoremap <Leader>lj :LspNextDiagnostic<CR>
nnoremap <Leader>lk :LspPreviousDiagnostic<CR>
nnoremap <Leader>ly :<C-u>LspDocumentFormat<CR>
vnoremap <Leader>lY :LspDocumentRangeFormat<CR>
" }}}
" ## Behavior ## {{{
" Opening windows and buffer switching
set splitbelow splitright " New windows appear below and to the right
set switchbuf=useopen,usetab,vsplit,split
set winminwidth=6 winheight=6 winminheight=6
set noequalalways
set nowinfixwidth nowinfixheight
" Editing
set textwidth=80
set formatoptions=tc    " Wrap text using textwidth
set formatoptions+=r    " Continue comments when enter in insertmode
set formatoptions+=q    " Enable format of comments
set formatoptions+=n    " Detect lists for formatting
set formatoptions+=b    " Auto wrap in insert mode and no wrapping of old lines
set nojoinspaces
set autoread
set noautowrite
set noautowriteall
set linebreak
set mouse=
set noautochdir
" Searching
set wrapscan
set ignorecase
set smartcase
set incsearch
set hlsearch
set magic
" command line
set wildmenu
set wildchar=9
set wildmode=list:full
set wildoptions=
set wildignorecase
set wildignore+=*/node_modules/*
set wildignore+=*/.git/*
set wildignore+=*/dist/*
set path=.,**
" Appearance
set signcolumn=yes
set foldcolumn=1
set nu rnu
set termguicolors
set display=lastline,uhex
set wrap
set wrapmargin=0
set showmatch
set matchtime=3
set noshowmode
set shortmess+=I
set cmdheight=1
set cmdwinheight=10
set noshowcmd
set rulerformat=
set laststatus=2
set noicon
set showtabline=1
set cursorline nocursorcolumn cursorlineopt=line
set colorcolumn=80
set list listchars=tab:→\ ,eol:¬,nbsp:␣,trail:•,extends:⟩,precedes:⟨ showbreak=↩\
" Performance
set updatetime=300 lazyredraw
" Diff
set diffopt=
set diffopt+=algorithm:patience
set diffopt+=indent-heuristic

set undofile undolevels=1000 undodir=$HOME\vimfiles\undodir
set noswapfile
" }}}
" ## SESSIONS ## {{{
function! s:maybe_save_session() abort
  if v:this_session != ''
    execute 'mksession! ' . v:this_session
  endif
endfunction
" }}}

command! CurrentBufferOnly execute '%bdelete|edit#bdelete#' " Delete all buffers except current one
augroup my_vimrc
  au!
  au! VimEnter,DirChanged * setlocal titlestring=%{getcwd()}
  au! BufEnter,VimLeavePre * call <SID>maybe_save_session()
  au! BufLeave,FocusLost,InsertEnter,WinLeave * if &nu | setlocal nornu | endif
  au! BufEnter,FocusGained,InsertLeave,WinEnter * if &nu | setlocal rnu |endif
augroup END

set spell
set spelllang=en_us,sv,cjk

set langmenu=en_US
let $LANG = 'en_US'
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

if has('gui')
  set background=light
  colorscheme mild
endif

" ## Plugins ## {{{
" Turn off default plugins
let g:loaded_2html_plugin=1
let g:loaded_gzip=1
let g:loaded_rrhelper=1
let g:loaded_tar=1
let g:loaded_tarPlugin=1
let g:loaded_vimballPlugin=1
let g:loaded_zip=1
let g:loaded_zipPlugin=1
" Load matchit.vim but only if the user hasn't installed a newer version
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif
" }}}
" ## VIM-ROOTER ## {{{
let g:rooter_patterns = ['.git', 'Cargo.toml', 'node_modules', 'tsconfig.json']
packadd vim-rooter
" }}}
" ## VIM-TEXTOBJ ## {{{
packadd vim-textobj-user
" }}}
" ## VIM-LSP/ASYNCOMPLETE {{{
let g:lsp_diagnostics_echo_cursor=1
let g:lsp_diagnostics_float_cursor=1
let g:lsp_highlights_enabled=1
let g:asyncomplete_auto_completeopt=0
let g:lsp_preview_float=1
let g:lsp_documentation_float_docked=1
packadd vim-lsp
packadd asyncomplete.vim
packadd asyncomplete-lsp.vim
set foldmethod=expr
      \ foldexpr=lsp#ui#vim#folding#foldexpr()
      \ foldtext=lsp#ui#vim#folding#foldtext()
set complete&
set completeopt=
set completeopt+=menuone
set completeopt+=noinsert
set completeopt+=preview
set infercase
set pumheight=7
set noshowfulltag
if executable('typescript-language-server')
  au User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
        \ 'whitelist': ['typescript', 'typescript.tsx', 'typescriptreact'],
        \ })
endif
" }}}

set noeb vb t_vb=
au GUIEnter * set vb t_vb=
