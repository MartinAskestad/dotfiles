unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

" ## Keyboard bindings ## {{{
" Switch : and . as well as , and ; for easier use on swedish keyboard
let mapleader = " "
nnoremap . :
nnoremap : .
nnoremap , ;
nnoremap ; ,
vnoremap . :
vnoremap : .
vnoremap ; ,
vnoremap , ;

nnoremap <Leader>N :nohlsearch<CR>

nnoremap <Leader>T :term<CR>

tnoremap <ESC> <C-w>N

" TABS
nnoremap <Leader>th :tabprevious<CR>
nnoremap <Leader>tj :tabmove -1<CR>
nnoremap <Leader>tk :tabmove +1<CR>
nnoremap <Leader>tl :tabnext<CR>
nnoremap <Leader>tH :tabfirst<CR>
nnoremap <Leader>tL :tablast<CR>
nnoremap <Leader>tq :bdelete<CR>
nnoremap <Leader>tQ :bdelete!<CR>
nnoremap <Leader>to :tabnew<SPACE>
nnoremap <Leader>tx :tabonly<CR>

" Views/Windows
nnoremap <Leader>vw <C-w>w
nnoremap <Leader>vq <C-w>c
nnoremap <Leader>vs <C-w>s
nnoremap <Leader>vv <C-w>v
nnoremap <Leader>vh <C-w>h
nnoremap <Leader>vj <C-w>j
nnoremap <Leader>vk <C-w>k
nnoremap <Leader>vl <C-w>l
nnoremap <Leader>vH <C-w>5<
nnoremap <Leader>vJ <C-w>:resize +5<CR>
nnoremap <Leader>vK <C-w>:resize -5<CR>
nnoremap <Leader>vL <C-w>5>
nnoremap <Leader>vb <C-w>=
nnoremap <Leader>vV <C-w>\|
nnoremap <Leader>vB <C-w>_
nnoremap <Leader>vm <C-w>\|<C-w>_

" Move lines
vnoremap <Leader>mj :m '>+1<CR>gv=gv
vnoremap <Leader>mk :m '<-2<CR>gv=gv
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

" Useful insert mode bindings
imap jj <ESC>
inoremap <C-BS> <C-w>
" }}}

" ## Shell ## {{{
set shell=pwsh.exe
set shellcmdflag=-NoProfile\ -NoLogo\ -NonInteractive\ -Command
set shellpipe=|
set shellredir=>
set shellquote=\"
set shellxquote=
" }}}

" ## Behavior ## {{{
" Encoding
if &encoding !=? 'utf-8' | let &termencoding=&encoding | endif
set encoding=utf-8 fileencoding=utf-8 fileformats=dos,unix
set fileencodings=utf-8,iso-8859-1
" Opening windows and buffer switching
set splitbelow	" New windows appear below
set splitright	" New windows appear to the right
set hidden	" Allow to switch buffers when not saved
set switchbuf=useopen,usetab,newtab
set winminwidth=6	" Set minimum window sizes
set winheight=6
set winminheight=6
set noequalalways
set nowinfixwidth
set nowinfixheight
" Editing
set textwidth=80
set formatoptions=cmMj
set nojoinspaces
set autoread
set noautowrite
set noautowriteall
set linebreak
set mouse=
set noautochdir
" Searching
set wrapscan
set ignorecase
set smartcase
set incsearch
set hlsearch
set magic
" command line
set wildmenu
set wildchar=9
set wildmode=list:full
set wildoptions=
set wildignorecase
set wildignore=**/node_modules/**,**/dist/**,**/.git/**
" Appearance
set nu
set rnu
set termguicolors
set background=dark
set display=lastline,uhex
set wrap
set wrapmargin=0
set showmatch
set matchtime=3
set noshowmode
set shortmess+=I
set cmdheight=1
set cmdwinheight=10
set noshowcmd
set rulerformat=
set laststatus=2
set title
set titlelen=100
set titleold=
set titlestring=%f
set noicon
set showtabline=1
set cursorline
set nocursorcolumn
set cursorlineopt=line
set colorcolumn=80
set list listchars=tab:→\ ,eol:¬,nbsp:␣,trail:•,extends:⟩,precedes:⟨ showbreak=↩\
" Performance
set updatetime=300
set lazyredraw

set undofile
set undolevels=1000
set undodir=$HOME/vimfiles/undodir
set noswapfile

augroup toggle_line_numbers
	au!
	autocmd BufLeave,FocusLost,InsertEnter,WinLeave *.* if &nu | setlocal nornu | endif
	autocmd BufEnter,FocusGained,InsertLeave,WinEnter *.* if &nu | setlocal rnu | endif
augroup END

" }}}

" ## Plugins ##
" Load matchit.vim but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
	runtime! macros/matchit.vim
endif
" ## VIM-POLYGLOT ## {{{
"packadd vim-polyglot
" }}}
" ## EMMET ## {{{
augroup emmet_keyboard_bindings
	au!
	" go to the next opening tag below current line
	nnoremap  <leader>hj 0/$/;/<[a-zA-Z][a-zA-Z0-9]*\%(\_[^>]*>\)\@=<CR>:nohlsearch<CR>
	" go  to the next end of closing tag or empty elenent below current line
	nnoremap  <leader>hJ 0/$/;/\%([^>]*$\)\@=<CR>:nohlsearch<CR>
	" go to the previous closing tag above the current line
	nnoremap  <leader>hk $?^?;?>\%([^>]*$\)\@=<CR>:nohlsearch<CR>
	" go to the previous opening tag above the current line
	nnoremap  <leader>hK $?^?;?^[^z]*\zs<\%([a-zA-Z][a-zA-Z0-9]*\_[^>]*>\)\@=<CR>:nohlsearch<CR>
	" go to the next tag element closing
	nnoremap  <leader>hl /><CR>:nohlsearch<CR>
	" go to the previous tag element opening
	nnoremap  <leader>hh ?<<CR>:nohlsearch<CR>
	" Map emmet to leader keys
	nnoremap <leader>he :call emmet#expandAbbr(3, "")<CR>
	nnoremap <leader>hE :call emmet#expandAbbr(1, "")<CR>
	vnoremap <leader>he :call emmet#expandAbbr(2, "")<CR>
	nnoremap <leader>hn :call emmet#nextPrev(0)<CR>
	nnoremap <leader>hN :call emmet#nextPrev(1)<CR>
	nnoremap <leader>hr :call emmet#removeTag()<CR>
	nnoremap <leader>hu :call emmet#updateTag()<CR>
	" Semantics
	setlocal iskeyword=@,48-57,_,-,\"
	" Navigation
	setlocal suffixesadd+=.html,.css,.txt,.js,.ts,.json
augroup END
let g:user_emmet_install_global = 0
autocmd FileType html,css,scss EmmetInstall
packadd emmet-vim
" }}}
" VIM-SURROUND {{{
packadd vim-surround
" }}}
" ## CAMELCASEMOTION ## {{{
packadd CamelCaseMotion
map <silent> w <Plug>CamelCaseMotion_w
map <silent> e <Plug>CamelCaseMotion_e
map <silent> b <Plug>CamelCaseMotion_b
map <silent> ge <Plug>CamelCaseMotion_ge
sunmap w
sunmap e
sunmap b
sunmap ge
omap <silent> iw <Plug>CamelCaseMotion_iw
xmap <silent> iw <Plug>CamelCaseMotion_iw
omap <silent> ie <Plug>CamelCaseMotion_ie
xmap <silent> ie <Plug>CamelCaseMotion_ie
omap <silent> ib <Plug>CamelCaseMotion_ib
xmap <silent> ib <Plug>CamelCaseMotion_ib
" }}}
" ## CONTEXT.VIM {{{
packadd context.vim
" }}}
" ## CSS3 COLORESQUE ## {{{
packadd vim-css3-syntax
packadd vim-coloresque
" }}}
" ## PRETTIER ## {{{
packadd vim-prettier
nmap <Leader>py <Plug>(Prettier)
vmap <Leader>py <Plug>(PrettierPartial)
augroup prettier_auto_save
	au!
	autocmd! BufWritePre *.html,*.htm,*.ts,*.css,*.scss Prettier
augroup END
" }}}
" ## GINA ## {{{
packadd gina.vim
nnoremap <silent> <Leader>gs :Gina status<CR>
nnoremap <Leader>gL :Gina log<CR>
nnoremap <Leader>gls :Gina ls<CR>
nnoremap <Leader>gT :<C-u>Gina tag<CR>
nnoremap <Leader>gc :<C-u>Gina commit<CR>
nnoremap <Leader>gx :<C-u>Gina stash save ""<Left>
nnoremap <Leader>gz :<C-u>Gina stash show<CR>

nnoremap <expr> <Leader>P ':<C-u>Gina! push origin ' . gina#component#repo#branch()
nnoremap <expr> <Leader>p ':<C-u>Gina! pull origin ' . gina#component#repo#branch()
nnoremap <expr> <Leader>F ':<C-u>Gina! fetch origin --prune'
nnoremap <Leader>M :<C-u>Gina! merge --no-ff<Space>

function! s:get_current_relpath() abort
  let git = gina#core#get_or_fail()
  let abspath = gina#core#repo#abspath(git, '')
  let curpath = substitute(expand('%:p'), '\', '/', 'g')
  let relpath = substitute(curpath, abspath, '', '')
  return relpath
endfunction

nnoremap <Leader>gb :<C-u>execute 'Gina blame :' . <SID>get_current_relpath()<CR>
nnoremap <Leader>gl :<C-u>execute 'Gina log :' . <SID>get_current_relpath()<CR>
nnoremap <Leader>gd :<C-u>execute 'Gina diff : ' . <SID>get_current_relpath()<CR>
nnoremap <Leader>gc :<C-u>execute 'Gina compare : ' . <SID>get_current_relpath()<CR>
" }}}
" ## VIM-LSP/ASYNCOMPLETE ## {{{
packadd asyncomplete.vim
packadd vim-lsp
packadd asyncomplete-lsp.vim
packadd asyncomplete-emmet.vim
packadd vim-lsp-settings
set foldmethod=expr
              \ foldexpr=lsp#ui#vim#folding#foldexpr()
              \ foldtext=lsp#ui#vim#folding#foldtext()
imap <C-Space> <Plug>(asyncomplete_force_refresh)
set complete&
set completeopt=menuone,noinsert,preview,popup
set infercase
set pumheight=7
set noshowfulltag
set shortmess+=c

let g:lsp_diagnostics_echo_cursor=1
let g:lsp_diagnostics_float_cursor=1
let g_lsp_highlights_enabled=1
let g:asyncompletet_auto_completeopt=0

inoremap <expr> <Down> pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up> pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <CR> pumvisible() ? asyncomplete#close_popup() : "\<CR>"
inoremap <expr> <TAB> pumvisible() ? asyncomplete#close_popup() : "\<TAB>"
inoremap <expr> <Left> pumvisible() ? asyncomplete#cancel_popup() : "\<Left>"
autocmd! CompleteDone ff if pumvisible() == 0 | pclose | endif
" }}}

set background=dark
colorscheme 4colors

" vim: set sw=2 ts=2 sts=2 et tw=78 foldmarker={{{,}}} foldmethod=marker:
